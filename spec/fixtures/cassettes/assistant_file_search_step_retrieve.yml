---
http_interactions:
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_Z8kflIC6P6N5SpnkPW4q7waD/runs/run_LsibmhG9KxLws7LJzv92DaHs/steps?order=asc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 14:31:32 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_62003a4d96e166e1d327164736a8e42d
      Openai-Processing-Ms:
      - '47'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=MMBDm3a_kOqB1rPwx8J5UqhNFK7NPfM7D1kVYmrXNPM-1728657092-1.0.1.1-88E7dyveTmzzlaeehpymgLb4KYIIoiW2qsO8KHCmajhwwc6EdGkOTZJTDi0PdqPC98kkMyKO89PqoE13LvYwrQ;
        path=/; expires=Fri, 11-Oct-24 15:01:32 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=TyEmFzyjMG_NYkhmvVMxOp1.wujDXTZ0g2rZxpCZjA4-1728657092413-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f8dea7e2879c7-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        {
          "object": "list",
          "data": [],
          "first_id": null,
          "last_id": null,
          "has_more": false
        }
  recorded_at: Fri, 11 Oct 2024 14:31:32 GMT
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_Z8kflIC6P6N5SpnkPW4q7waD/runs/run_LsibmhG9KxLws7LJzv92DaHs/steps?order=asc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 14:31:33 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_eae927fd9854f27bfc8295d7c9a1012a
      Openai-Processing-Ms:
      - '345'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=62lQVIZgyS60OF2Xt.ppKtDcAXQ_Bs1kxA6JuG.zd90-1728657093-1.0.1.1-MjQW5vavBK6TKaQ.xVcSTG9_8v8T7CXHzr8i64XHmGSPys2QqxD_N7slRzf_HXu0FiU9JrKxWxr0.BxojkmmKw;
        path=/; expires=Fri, 11-Oct-24 15:01:33 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=wLHr2uYYoAohLwXW46FfvLO0afPLiDzdJjXb6V3GjJA-1728657093461-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f8def085b8885-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        {
          "object": "list",
          "data": [
            {
              "id": "step_bIADdvGU9EbstnuS58g0N9tt",
              "object": "thread.run.step",
              "created_at": 1728657092,
              "run_id": "run_LsibmhG9KxLws7LJzv92DaHs",
              "assistant_id": "asst_GmHlRPTg8SwVCOF3imde6g95",
              "thread_id": "thread_Z8kflIC6P6N5SpnkPW4q7waD",
              "type": "tool_calls",
              "status": "in_progress",
              "cancelled_at": null,
              "completed_at": null,
              "expires_at": 1728657691,
              "failed_at": null,
              "last_error": null,
              "step_details": {
                "type": "tool_calls",
                "tool_calls": []
              },
              "usage": null
            }
          ],
          "first_id": "step_bIADdvGU9EbstnuS58g0N9tt",
          "last_id": "step_bIADdvGU9EbstnuS58g0N9tt",
          "has_more": false
        }
  recorded_at: Fri, 11 Oct 2024 14:31:33 GMT
- request:
    method: get
    uri: https://api.openai.com/v1/threads/thread_Z8kflIC6P6N5SpnkPW4q7waD/runs/run_LsibmhG9KxLws7LJzv92DaHs/steps/step_bIADdvGU9EbstnuS58g0N9tt?include%5B%5D=step_details.tool_calls%5B*%5D.file_search.results%5B*%5D.content
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Openai-Beta:
      - assistants=v2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 11 Oct 2024 14:31:34 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      Openai-Organization:
      - user-jxm65ijkzc1qrfhc0ij8moic
      X-Request-Id:
      - req_412fba28e2a08ced02b0e1bd14fdd727
      Openai-Processing-Ms:
      - '71'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=ydq8bGcKh3ZIAsHj7Ah8ffLAcDIk5B.Jn8aPCPAPds8-1728657094-1.0.1.1-Z.9O7KUqutyhbIqUwtSbUBP8fim0XIV75QX_JLgnW3.5kif0EC.80EfTWneLHeczkFkkN3ydZ0oQvf3JgApNgg;
        path=/; expires=Fri, 11-Oct-24 15:01:34 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=HEujshyfBZZkbJzbjEs_UfqOHA0JqEr9k4BA9AdWaNw-1728657094274-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 8d0f8df5e82f6408-LHR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 11 Oct 2024 14:31:34 GMT
recorded_with: VCR 6.1.0
